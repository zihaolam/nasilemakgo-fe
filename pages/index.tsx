/* eslint-disable @next/next/no-img-element */
import type { NextPage } from "next";
import Head from "next/head";
import SliderCard from "../components/SliderCard";
import UserDetectionCard from "../components/UserDectectionCard";
import UserTakeAlert from "../components/UserTakeAlert";
import { useState, useEffect, useRef, useCallback } from "react";
import useWebSocket, { ReadyState } from "react-use-websocket";
import Loader from "../components/SliderCard/Loader";

interface SingleMessagePayload {
  Id: string;
  FileKey: string;
  Quantity: number;
  Action: string;
  PeopleName: string;
  Timestamp: number;
}

interface AggregateMessagePayload {
  Id: string;
  FileKey: string;
  Quantity: number;
  Action: string;
  PeopleName: string;
}

type MessageType = "single" | "aggregate";

interface Message {
  type: MessageType;
  payload: SingleMessagePayload & AggregateMessagePayload;
}

const Home: NextPage = () => {
  const [socketUrl, setSocketUrl] = useState(
    "wss://ws.serverlessgo.myawsworld.com/initiate"
  );
  const [aggregateData, setAggregateData] = useState<AggregateMessagePayload[]>(
    []
  );
  const [singleData, setSingleData] = useState<SingleMessagePayload>();

  const { sendMessage, lastMessage, readyState } = useWebSocket(socketUrl, {
    reconnectAttempts: 5,
    reconnectInterval: 5,
  });
  //https://d121x775m9die3.cloudfront.net/${FileKey}

  useEffect(() => {
    if (lastMessage !== null) {
      const data: Message = JSON.parse(lastMessage.data);
      const { type, payload } = data;
      switch (type) {
        case "single":
          return setSingleData(payload);
        case "aggregate":
          return setAggregateData((prevAggregate) => {
            if (prevAggregate.find((entry) => entry.Id === payload.Id))
              return prevAggregate.map((entry) =>
                entry.Id === payload.Id ? payload : entry
              );
            return [...prevAggregate, payload];
          });
      }
    }
  }, [lastMessage]);

  // useEffect(() => {
  //   const focusHandler = () => {
  //     if (readyState !== ReadyState.OPEN && readyState !== ReadyState.CONNECTING)
  //       console.log('fuck')
  //   }
  //   window.addEventListener("focus", focusHandler)

  //   return () => window.removeEventListener("focus", focusHandler);
  // }, [readyState])

  useEffect(() => {
    fetch(
      "https://edlpdsg48a.execute-api.ap-southeast-1.amazonaws.com/prod/aggregate?limit=10"
    )
      .then((response) => response.json())
      .then((data) => {
        setAggregateData(data.Items);
      });
    fetch(
      "https://edlpdsg48a.execute-api.ap-southeast-1.amazonaws.com/prod/events?latest=true"
    )
      .then((response) => response.json())
      .then((data) => {
        setSingleData(data.Items[0]);
        if (data.Items[0].PeopleName === "No Data") {
          playAlarm();
        }
      });
  }, []);

  const alarmRef = useRef<HTMLAudioElement>(null);

  const recursiveMute = useCallback(() => {
    alarmRef.current ? (alarmRef.current.muted = true) : recursiveMute();
  }, []);

  // useEffect(() => {
  //   recursiveMute();
  // }, [recursiveMute]);
  const currentTime = useRef<NodeJS.Timer>();

  useEffect(() => {
    return () => {
      clearTimeout(currentTime.current);
    };
  }, []);

  const playAlarm = () => {
    alarmRef.current!.play();
    if (currentTime.current) clearTimeout(currentTime.current);
    currentTime.current = setTimeout(() => {
      alarmRef.current!.pause();
    }, 5000);
  };

  return (
    <div>
      <Head>
        <title>Nasi Lemak GO</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <audio src="/alarm_v2.m4a" ref={alarmRef} className="hidden" />
      <div className="overflow-y-hidden h-screen relative">
        <div className="flex flex-col h-full justify-center md:flex md:justify-start">
          <img
            className=" hidden md:block h-screen w-screen absolute top-0 left-0 object-cover object-right"
            src="/nasilemakhd2_edited_min.jpeg"
            alt="santa"
          />
          <img
            className=" md:hidden w-full "
            src="https://tuk-cdn.s3.amazonaws.com/can-uploader/hero_8_img-2.png"
            alt="santa"
          />
          <div className="flex flex-col bg-gray-900 bg-opacity-50 mt-4 w-screen justify-between h-screen overflow-hidden">
            <div className="w-[200%] flex-1 overflow-x-hidden relative">
              {/* 2. */}
              <div className="w-[200%] flex items-center justify-start gap-x-5 absolute left-0 animate">
                {aggregateData.length
                  ? aggregateData.length < 20
                    ? Array(
                        Math.ceil(
                          (20 - aggregateData.length) / aggregateData.length
                        )
                      )
                        .fill(0)
                        .slice(0, 20)
                        .map((filler) =>
                          aggregateData.map((item, index) => (
                            <SliderCard {...item} key={item.Id} />
                          ))
                        )
                    : aggregateData
                        .slice(0, 20)
                        .map((item, index) => (
                          <SliderCard {...item} key={item.Id} />
                        ))
                  : Array(20)
                      .fill(0)
                      .map((filler, key) => <Loader key={key} />)}
              </div>
            </div>
            <div className="mx-4 flex flex-col space-y-3 mb-4">
              {singleData && (
                <div
                  className={`w-[600px] h-auto bg-white flex items-center relative transform transition-all rounded-lg ${
                    !singleData?.FileKey && "animate-pulse"
                  }`}
                >
                  <div
                    className={`${
                      singleData?.PeopleName === "No Data"
                        ? "border-red-500 bg-red-500 bg-opacity-20"
                        : "border-green-500"
                    } absolute w-full h-full border-4 animate-pulse duration-200`}
                  ></div>
                  <UserDetectionCard
                    FileKey={singleData?.FileKey}
                    PeopleName={singleData?.PeopleName}
                  />
                </div>
              )}
              {singleData && (
                <UserTakeAlert
                  Action={singleData?.Action}
                  Timestamp={singleData?.Timestamp}
                  PeopleName={singleData?.PeopleName}
                  Quantity={singleData?.Quantity}
                />
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Home;
